<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>0x1feb</title>
    <link>https://0x1feb.github.io/</link>
    <description>Recent content on 0x1feb</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 25 Dec 2022 14:02:50 +0900</lastBuildDate><atom:link href="https://0x1feb.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二分探索 (binary search)</title>
      <link>https://0x1feb.github.io/posts/2022/12/25/binary-search/</link>
      <pubDate>Sun, 25 Dec 2022 14:02:50 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/12/25/binary-search/</guid>
      <description>二分探索とは、ソート済みの配列について、探索範囲を半分に絞り込む操作を繰り返す検索アルゴリズムである。 たとえば、素数の配列が与えられていると</description>
    </item>
    
    <item>
      <title>ナップサック問題 (動的計画法)</title>
      <link>https://0x1feb.github.io/posts/2022/12/21/knapsack-dp/</link>
      <pubDate>Wed, 21 Dec 2022 09:22:53 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/12/21/knapsack-dp/</guid>
      <description>ナップサック問題とは、 $n$ 種類の品物（価値 $v$ , 重量 $w$ ）のうちいくつかを選び、ナップサックに収まる範囲で品物の価値の合計が最大になる選び方を求め</description>
    </item>
    
    <item>
      <title>素数列挙 (エラトステネスの篩)</title>
      <link>https://0x1feb.github.io/posts/2022/12/20/sieve-of-eratosthenes/</link>
      <pubDate>Tue, 20 Dec 2022 09:12:51 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/12/20/sieve-of-eratosthenes/</guid>
      <description>エラトステネスの篩とは、指定した数以下の素数を探すアルゴリズムである。 指定した数までの数列を用意し、素数を見つけたらその素数の倍数を篩い落と</description>
    </item>
    
    <item>
      <title>bit 全探索</title>
      <link>https://0x1feb.github.io/posts/2022/12/18/bit-full-search/</link>
      <pubDate>Sun, 18 Dec 2022 20:55:55 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/12/18/bit-full-search/</guid>
      <description>2のべき乗で求められる組み合わせを全探索する方法として、bit 全探索という方法がある。 例えば、 $n$ 人が「立っている」または「座っている」のどち</description>
    </item>
    
    <item>
      <title>C&#43;&#43; の std::map メモ</title>
      <link>https://0x1feb.github.io/posts/2022/10/26/cpp-map-memo/</link>
      <pubDate>Wed, 26 Oct 2022 21:14:34 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/10/26/cpp-map-memo/</guid>
      <description>概要 AtCoder で std::map を使うときのメモ書き。 基本 map キーに設定した値の昇順にソートされる。 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int main() { map&amp;lt;int, int&amp;gt; mp; mp[5] = 10; mp[1] = 3; mp[4] = 6; for (auto p : mp) { printf(&amp;#34;key:%d, value:%d\n&amp;#34;, p.first, p.second); } return 0;</description>
    </item>
    
    <item>
      <title>複数の要素を Stream でまとめる</title>
      <link>https://0x1feb.github.io/posts/2022/01/27/combining-multi-elements-in-java-stream/</link>
      <pubDate>Thu, 27 Jan 2022 22:28:34 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/01/27/combining-multi-elements-in-java-stream/</guid>
      <description>やりたいこと 単体のリストではない複数の要素に、同じ処理を適用したい。 複数のリストや要素を一時的にまとめた Stream を作成し、一括で処理したい。 public class User</description>
    </item>
    
    <item>
      <title>Java の Stream メモ</title>
      <link>https://0x1feb.github.io/posts/2022/01/24/java-stream-memo/</link>
      <pubDate>Mon, 24 Jan 2022 22:00:00 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/01/24/java-stream-memo/</guid>
      <description>Stream とは Java 8 から追加され、コレクションに対する集約操作をサポートした機能を持つ。 中間操作と終端操作を組み合わせてパイプラインにできるため、fo</description>
    </item>
    
    <item>
      <title>hello, world</title>
      <link>https://0x1feb.github.io/posts/2022/01/21/hello-world/</link>
      <pubDate>Fri, 21 Jan 2022 22:35:12 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/01/21/hello-world/</guid>
      <description>hello, world main() { printf(&amp;#34;hello, world\n&amp;#34;); } </description>
    </item>
    
    
    
  </channel>
</rss>
