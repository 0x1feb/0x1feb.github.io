<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>algorithm on 0x1feb</title>
    <link>https://0x1feb.github.io/categories/algorithm/</link>
    <description>Recent content in algorithm on 0x1feb</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 16 Feb 2023 19:15:33 +0900</lastBuildDate><atom:link href="https://0x1feb.github.io/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>バケットソート (Bucket Sort)</title>
      <link>https://0x1feb.github.io/posts/2023/02/16/backet-sort/</link>
      <pubDate>Thu, 16 Feb 2023 19:15:33 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2023/02/16/backet-sort/</guid>
      <description>バケットソートとは、整列したいデータがとりうる値の数だけバケツを用意し、全ての要素をバケツに入れた後、順番に取り出すソートアルゴリズムである</description>
    </item>
    
    <item>
      <title>クイックソート (Quick Sort)</title>
      <link>https://0x1feb.github.io/posts/2023/01/12/quick-sort/</link>
      <pubDate>Thu, 12 Jan 2023 06:57:32 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2023/01/12/quick-sort/</guid>
      <description>クイックソートとは、適当な数を基準として、小さい値と大きい値に分割することを繰り返すソートアルゴリズムである。 ソースコード #include &amp;lt;bits/stdc++.h&amp;gt;#define rep(i, n) for (int i = 0;</description>
    </item>
    
    <item>
      <title>マージソート (Merge Sort)</title>
      <link>https://0x1feb.github.io/posts/2023/01/06/merge-sort/</link>
      <pubDate>Fri, 06 Jan 2023 23:13:19 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2023/01/06/merge-sort/</guid>
      <description>マージソートとは、配列を分割し、分割された各配列の要素をソートしてマージするソートアルゴリズムである。 ソースコード #include &amp;lt;bits/stdc++.h&amp;gt;#define rep(i, n) for (int i = 0; i &amp;lt; (n); ++i)</description>
    </item>
    
    <item>
      <title>バブルソート (Bubble sort)</title>
      <link>https://0x1feb.github.io/posts/2023/01/04/bubble-sort/</link>
      <pubDate>Wed, 04 Jan 2023 19:46:02 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2023/01/04/bubble-sort/</guid>
      <description>ソースコード バブルソートとは、順番が逆になっている隣接要素がなくなるまで大小を比較し交換するソートアルゴリズムである。 #include &amp;lt;bits/stdc++.h&amp;gt;#define rep(i, n) for (int i = 0; i &amp;lt;</description>
    </item>
    
    <item>
      <title>挿入ソート (Insertion sort)</title>
      <link>https://0x1feb.github.io/posts/2022/12/29/insertion-sort/</link>
      <pubDate>Thu, 29 Dec 2022 11:37:28 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/12/29/insertion-sort/</guid>
      <description>挿入ソートとは、未ソートの部分から取り出した要素を、ソート済みの部分の適切な位置に挿入するソートアルゴリズムである。 ソースコード #include &amp;lt;bits/stdc++.h&amp;gt;#define rep(i, n) for (int</description>
    </item>
    
    <item>
      <title>最大公約数 (ユークリッドの互除法)</title>
      <link>https://0x1feb.github.io/posts/2022/12/27/euclidean-algorithm/</link>
      <pubDate>Tue, 27 Dec 2022 21:32:09 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/12/27/euclidean-algorithm/</guid>
      <description>ユークリッドの互除法とは、2つの自然数の最大公約数を求めるアルゴリズムである。 ソースコード #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int gcd(int a, int b) { return (b == 0 ? a : gcd(b, a % b)); } int main() {</description>
    </item>
    
    <item>
      <title>二分探索 (binary search)</title>
      <link>https://0x1feb.github.io/posts/2022/12/25/binary-search/</link>
      <pubDate>Sun, 25 Dec 2022 14:02:50 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/12/25/binary-search/</guid>
      <description>二分探索とは、ソート済みの配列について、探索範囲を半分に絞り込む操作を繰り返す検索アルゴリズムである。 たとえば、素数の配列が与えられていると</description>
    </item>
    
    <item>
      <title>ナップサック問題 (動的計画法)</title>
      <link>https://0x1feb.github.io/posts/2022/12/21/knapsack-dp/</link>
      <pubDate>Wed, 21 Dec 2022 09:22:53 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/12/21/knapsack-dp/</guid>
      <description>ナップサック問題とは、 $n$ 種類の品物（価値 $v$ , 重量 $w$ ）のうちいくつかを選び、ナップサックに収まる範囲で品物の価値の合計が最大になる選び方を求め</description>
    </item>
    
    <item>
      <title>素数列挙 (エラトステネスの篩)</title>
      <link>https://0x1feb.github.io/posts/2022/12/20/sieve-of-eratosthenes/</link>
      <pubDate>Tue, 20 Dec 2022 09:12:51 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/12/20/sieve-of-eratosthenes/</guid>
      <description>エラトステネスの篩とは、指定した数以下の素数を探すアルゴリズムである。 指定した数までの数列を用意し、素数を見つけたらその素数の倍数を篩い落と</description>
    </item>
    
    <item>
      <title>bit 全探索</title>
      <link>https://0x1feb.github.io/posts/2022/12/18/bit-full-search/</link>
      <pubDate>Sun, 18 Dec 2022 20:55:55 +0900</pubDate>
      
      <guid>https://0x1feb.github.io/posts/2022/12/18/bit-full-search/</guid>
      <description>2のべき乗で求められる組み合わせを全探索する方法として、bit 全探索という方法がある。 例えば、 $n$ 人が「立っている」または「座っている」のどち</description>
    </item>
    
  </channel>
</rss>
