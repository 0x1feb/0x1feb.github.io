<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on 0x1feb</title>
    <link>https://0x1feb.github.io/categories/java/</link>
    <description>Recent content in Java on 0x1feb</description>
    <generator>Hugo -- 0.147.5</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 27 Sep 2024 23:39:26 +0900</lastBuildDate>
    <atom:link href="https://0x1feb.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JUnit 5 の動的テスト @TestTemplate を整理する</title>
      <link>https://0x1feb.github.io/posts/2024/09/27/understanding-junit-5-test-template-annotation/</link>
      <pubDate>Fri, 27 Sep 2024 23:39:26 +0900</pubDate>
      <guid>https://0x1feb.github.io/posts/2024/09/27/understanding-junit-5-test-template-annotation/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5 の動的テストを整理する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@TestTemplate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;h3 id=&#34;testtemplate&#34;&gt;&lt;code&gt;@TestTemplate&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@TestTemplate&lt;/code&gt; を付与したメソッドは、登録したプロバイダから返されるコンテキストの数だけ実行されるテストメソッドとなる。プロバイダを個別に実装することで、テストメソッドで使用するコンテキストを柔軟に制御できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JUnit 5 の @TempDir でテスト実行時のみの一時ディレクトリを作成する</title>
      <link>https://0x1feb.github.io/posts/2024/09/24/understanding-junit-5-temp-dir-annotation/</link>
      <pubDate>Tue, 24 Sep 2024 22:06:50 +0900</pubDate>
      <guid>https://0x1feb.github.io/posts/2024/09/24/understanding-junit-5-temp-dir-annotation/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5 のテストにて、テスト実行時のみに使用する一時ディレクトリを作成する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@TempDir&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;テスト実行時のみ実態のあるファイルやディレクトリを扱いたいときに役立つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;説明&#34;&gt;説明&lt;/h2&gt;
&lt;h3 id=&#34;tempdir&#34;&gt;&lt;code&gt;@TempDir&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@TempDir&lt;/code&gt; は、一時ディレクトリを作成するアノテーションである。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JUnit 5 の動的テスト @ParameterizedTest を整理する</title>
      <link>https://0x1feb.github.io/posts/2024/09/23/understanding-junit-5-parameterized-test-annotation/</link>
      <pubDate>Mon, 23 Sep 2024 12:40:01 +0900</pubDate>
      <guid>https://0x1feb.github.io/posts/2024/09/23/understanding-junit-5-parameterized-test-annotation/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5 の動的テストを整理する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@ParameterizedTest&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@ValueSource&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@EnumSource&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@MethodSource&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@CsvSource&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@CsvFileSource&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ArgumentsSource&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ArgumentsSources&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;h3 id=&#34;parameterizedtest&#34;&gt;&lt;code&gt;@ParameterizedTest&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@ParameterizedTest&lt;/code&gt; は、単一のテストメソッドを複数の入力値またはパラメーターで実行できるようにするアノテーションである。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JUnit 5 の動的テスト @RepeatedTest を整理する</title>
      <link>https://0x1feb.github.io/posts/2024/09/09/understanding-junit-5-repeated-test-annotation/</link>
      <pubDate>Mon, 09 Sep 2024 19:20:26 +0900</pubDate>
      <guid>https://0x1feb.github.io/posts/2024/09/09/understanding-junit-5-repeated-test-annotation/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5 の動的テストを整理する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@RepeatedTest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;h3 id=&#34;repeatedtest&#34;&gt;&lt;code&gt;@RepeatedTest&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@RepeatedTest&lt;/code&gt; は、指定した回数だけテストメソッドを繰り返すテストである。&lt;/p&gt;
&lt;p&gt;例えば、以下の &lt;code&gt;ExampleRepeatedTest&lt;/code&gt; は、&lt;code&gt;@RepeatedTest(2)&lt;/code&gt; が付与されたテストを 1 つ持つ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JUnit 5 の静的テスト @Test を整理する</title>
      <link>https://0x1feb.github.io/posts/2024/09/08/understanding-junit-5-test-annotation/</link>
      <pubDate>Sun, 08 Sep 2024 23:48:51 +0900</pubDate>
      <guid>https://0x1feb.github.io/posts/2024/09/08/understanding-junit-5-test-annotation/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5 の静的テストを整理する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;h3 id=&#34;test&#34;&gt;&lt;code&gt;@Test&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@Test&lt;/code&gt; アノテーションは、付与したメソッドがテストメソッドであることを表す。&lt;/p&gt;
&lt;p&gt;以下の &lt;code&gt;ExampleTest&lt;/code&gt; は、&lt;code&gt;@Test&lt;/code&gt; のテストを 2 つ持つ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JUnit 5 のライフサイクルを整理する</title>
      <link>https://0x1feb.github.io/posts/2024/09/07/understanding-junit-5-lifecycle/</link>
      <pubDate>Sat, 07 Sep 2024 18:17:26 +0900</pubDate>
      <guid>https://0x1feb.github.io/posts/2024/09/07/understanding-junit-5-lifecycle/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5 のライフサイクルを整理する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@TestInstance&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TestInstance.Lifecycle.PER_METHOD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TestInstance.Lifecycle.PER_CLASS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@BeforeAll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@AfterAll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@BeforeEach&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@AfterEach&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;説明&#34;&gt;説明&lt;/h2&gt;
&lt;h3 id=&#34;ライフサイクル&#34;&gt;ライフサイクル&lt;/h3&gt;
&lt;p&gt;JUnit 5 のテストクラスは、以下の 2 つのライフサイクルがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TestInstance.Lifecycle.PER_METHOD&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;メソッド単位でテストクラスオブジェクトが生成される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TestInstance.Lifecycle.PER_CLASS&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;クラス単位でテストクラスオブジェクトが生成される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テストクラスのライフサイクルは、テストクラスに &lt;code&gt;@TestInstance&lt;/code&gt; アノテーションを付与することで設定できる。&lt;code&gt;@TestInstance&lt;/code&gt; を付与していない場合のデフォルトのライフサイクルは、&lt;code&gt;PER_METHOD&lt;/code&gt; である。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JUnit 5 のテストクラスを整理する</title>
      <link>https://0x1feb.github.io/posts/2024/09/06/junit-5-test-classes/</link>
      <pubDate>Fri, 06 Sep 2024 11:17:08 +0900</pubDate>
      <guid>https://0x1feb.github.io/posts/2024/09/06/junit-5-test-classes/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5 のテストクラスを整理する。
&lt;ul&gt;
&lt;li&gt;テストクラス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Nested&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;説明&#34;&gt;説明&lt;/h2&gt;
&lt;h3 id=&#34;テストクラス名&#34;&gt;テストクラス名&lt;/h3&gt;
&lt;p&gt;基本的には、テスト対象のクラス名の末尾に &lt;code&gt;Test&lt;/code&gt; を付与したクラス名を使うと良い。&lt;/p&gt;
&lt;p&gt;JUnit は、デフォルトで以下の正規表現に一致するクラスがテストクラスとして検出される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maven で JUnit 5 の @DisplayName が反映されない問題に対処する</title>
      <link>https://0x1feb.github.io/posts/2024/09/05/fixing-display-name-annotation-issue-in-maven-with-junit-5/</link>
      <pubDate>Thu, 05 Sep 2024 12:47:40 +0900</pubDate>
      <guid>https://0x1feb.github.io/posts/2024/09/05/fixing-display-name-annotation-issue-in-maven-with-junit-5/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5 にて、 &lt;code&gt;@DisplayName&lt;/code&gt; を付与したテストを実行しても、実行結果に &lt;code&gt;@DisplayName&lt;/code&gt; で設定した名前が反映されない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maven-surefire-plugin&lt;/code&gt; の設定を入れることで、&lt;code&gt;@DisplayName&lt;/code&gt; が反映されるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5&lt;/li&gt;
&lt;li&gt;Maven 3.8.x+&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pom.xml&lt;/code&gt; に以下を設定する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JUnit 5 で Java のテストコードを作成する</title>
      <link>https://0x1feb.github.io/posts/2024/09/04/writing-test-code-in-java-using-junit-5/</link>
      <pubDate>Wed, 04 Sep 2024 15:36:05 +0900</pubDate>
      <guid>https://0x1feb.github.io/posts/2024/09/04/writing-test-code-in-java-using-junit-5/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5 について、最低限の動きを整理する。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Test&lt;/code&gt; アノテーション&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertEquals&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fail&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 5&lt;/li&gt;
&lt;li&gt;Java 8 (or higher)
&lt;ul&gt;
&lt;li&gt;今回のサンプルは Java 21 で作成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;
&lt;h3 id=&#34;ライブラリの設定&#34;&gt;ライブラリの設定&lt;/h3&gt;
&lt;p&gt;JUnit 5 User Guide の以下の章を参照し、環境に合わせて JUnit 5 に必要なライブラリを設定する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JUnit 4 から JUnit 5 に移行する</title>
      <link>https://0x1feb.github.io/posts/2024/09/01/migrating-from-junit-4-to-junit-5/</link>
      <pubDate>Sun, 01 Sep 2024 10:57:31 +0900</pubDate>
      <guid>https://0x1feb.github.io/posts/2024/09/01/migrating-from-junit-4-to-junit-5/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 4 のテストコードを JUnit 5 に移行する。&lt;/li&gt;
&lt;li&gt;JUnit 4 のテストコードはそのままにして、新規のテストコードは JUnit 5 で作成する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JUnit 4&lt;/li&gt;
&lt;li&gt;JUnit 5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;
&lt;h3 id=&#34;junit-5-ライブラリの追加&#34;&gt;JUnit 5 ライブラリの追加&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/junit-team/junit5-samples/tree/main/junit5-migration-maven&#34;&gt;junit5-samples/junit5-migration-maven at main · junit-team/junit5-samples&lt;/a&gt; を参考に、&lt;code&gt;pom.xml&lt;/code&gt; を更新する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>複数の要素を Stream でまとめる</title>
      <link>https://0x1feb.github.io/posts/2022/01/27/combining-multi-elements-in-java-stream/</link>
      <pubDate>Thu, 27 Jan 2022 22:28:34 +0900</pubDate>
      <guid>https://0x1feb.github.io/posts/2022/01/27/combining-multi-elements-in-java-stream/</guid>
      <description>&lt;h2 id=&#34;やりたいこと&#34;&gt;やりたいこと&lt;/h2&gt;
&lt;p&gt;単体のリストではない複数の要素に、同じ処理を適用したい。&lt;/p&gt;
&lt;p&gt;複数のリストや要素を一時的にまとめた Stream を作成し、一括で処理したい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;(String name, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// getter と setter は省略&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, age: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下のリスト1とリスト2をまとめたり、リスト1と単体の要素1をまとめたりして処理する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java の Stream メモ</title>
      <link>https://0x1feb.github.io/posts/2022/01/24/java-stream-memo/</link>
      <pubDate>Mon, 24 Jan 2022 22:00:00 +0900</pubDate>
      <guid>https://0x1feb.github.io/posts/2022/01/24/java-stream-memo/</guid>
      <description>&lt;h2 id=&#34;stream-とは&#34;&gt;Stream とは&lt;/h2&gt;
&lt;p&gt;Java 8 から追加され、コレクションに対する集約操作をサポートした機能を持つ。&lt;/p&gt;
&lt;p&gt;中間操作と終端操作を組み合わせてパイプラインにできるため、for 文による繰り返し処理を簡潔に記述できる。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
